7.链接

链接可以在编译时由静态编译器来完成，也可以在加载时和运行时由动态链接器来完成。

链接器处理称为目标文件的二进制文件，它有三种不同的形式：可重定位的、可执行的和共享的。

可重定位的目标文件由静态链接器合并成一个可执行的目标文件，它可以加载到存储器中并执行。

共享目标文件（共享库）是在运行时由动态链接器链接和加载的，或者隐含地在调用程序被加载和开始执行时，
或者根据需要在程f调用dlopen库的函数时。

链接器的两个主要任务是符号解析重定位，符号解析将目标文件中的每个全局符号都绑定到一个唯一的定义，
而重定位确定每个符号的最终存储器地址，并修改对那些目标的引用。

静态链接器是由像GCC这样的编译驱动器调用的。它们将多个可重定位目标文件合
并成一个单独的可执行目标文件。多个目标文件可以定义相同的符号，而链接器用来悄
悄地解析这些多重定义的规则可能在用户程序中引入的微妙错误。

多个目标文件可以被连接到一个单独的静态库中。链接器用库来解析其他目标模块
中的符号引用。许多链接器通过从左到右的顺序扫描来解析符号引用，这是另一个引起
令人迷惑的链接时错误的来源。

加载器将可执行文件的内容映射到存储器，并运行这个程序。链接器还可能生成部
分链接的可执行目标文件，这样的文件中有对定义在共享库中的程序和数据的未解析的
引用。在加载时， 加载器将部分链接的可执行文件映射到存储器，然后调用动态链接
器，它通过加载共享库和重定位程序中的引用来完成链接任务。

被编译为位置无关代码的共享库可以加载到任何地方，也可以在运行时被多个进程
共享。为了加载、链接和访问共享库的函数和数据，应用程序还可以在运行时使用动态
链接器。