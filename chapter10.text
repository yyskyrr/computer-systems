10.系统级I/O

Unix提供了少量的系统级函数，它们允许应用程序打开、关闭、读和写文件，提取
文件的元数据，以及执行I/O重定向。Unix的读和写操作会出现不足值，应用程序必须
能正确地预计和处理这种情况。应用程序不应直接调用Unix I/O函数，而应该使用
RI0包，RI0包通过反复 执行读写操作，直到传送完所有的请求数据，自动处理不足
值。

Unix内核使用三个相关的数据结构来表示打开的文件。描述符表中的表项指向打开
文件表中的表项，而打开文件表中的表项又指向v-node表中的表项。每个进程都有它
自己单独的描述符表，而所有的进程共享同一个打开文件表和v-node表。理解这些结
构的一般组成就能使我们清楚地理解文件共享和I/O重定向。

标准I/O库是基于Unix I/O实现的，并提供了一组强大的高级I/O例程。对于大多
数应用程序而言，标准I/O更简单，是优于Unix I/O的选择。然而，因为对标准I/O和
网络文件的一些相互不兼容的限制，Unix I/O比标准I/O更适用于网络应用程序。