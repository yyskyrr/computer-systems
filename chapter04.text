4.处理器体系结构

我们已经看到，指令集体系结构，即ISA,在处理器行为(就指令集合及其编码而言）和如何实现处理器之间提供了一层抽象。

ISA提供了程序执行的一种顺序说明，也就是一条指令执行完了，下一条指令才会开始。
从IA32指令开始，大大简化数据类型、地址模式和指令编码，我们定义了Y86指
令集。得到的ISA既有RISC指令集的属性,也有CISC指令集的属性d然后，将不同指令
组织放到五个阶段中处理，在此,根据被执行指令的不同，每个阶段中的操作也不相
同。据此，我们构造了SEQ处理器，其中每个时钟周期执行一条指令，它会通迓所有五
个阶段。

流水线化通过让不同的阶段并行操作，改进了系统的吞吐量性能。在任意个给定
的时刻， 多条指夺被不同的阶段处理。在引入这秭并行性的过程中，我们必须非常小
心，以提供与程方的顺序执行相同的程序级行为a通过重新调整SEQ各个部分的顺序，引
入流水线，我们得到 SEQ+,接着添加流水线寄存器，创建出PIPE-流水线6然后，添加了
转发逻辑，加速了将结果 从一条指令发送到另一条指令，从而提高了流水线的性能。有
几种特殊情况需要额外的流水线控 制逻辑来暂停或取消一些流水线阶段。
我们的设计中包括一些基本的异常处理机制,在此，保证只有到异常指令之前的指
令会影响 程序员可见的状态。实现完整的异常处理远比此更具挑战性。在釆用了更深流
水线和更多并行性 的系统中，要想正确处理异常就更加爱杂了。
在本章中，我们学习了有关处理器设计的几个重要经验‘：
管理复杂性是首要问题。
想要优化梗用硬件资源，在最小命成本下获得最大的性能。
为了实现这个目的，我们创建了一个非常简单而一致的框架,来处理所有不同的指令
类型。有了这个框架，就能够在处理不同指令类型的逻辑中共享硬件单元。

我们不需要直接实现ISA。
ISA的直接实现意味着一个顺序的设计。为了获得更高的性能，我扪想运用硬件能力以同时执行许多操作，
这就导致要使用流水线化设计，通过仔细设计和分析，我们能够处理各种流水线冒险，
因此运行一个程序的整体效果，同用ISA模型获得的效果完全一致。

硬件设计人必须非常谨慎小心。一旦芯片制造出来，就几乎不可能改正任何错误了。
一开始就使设计正确是非常重要的。这就意味着要仔细地分析各种指令类型和组合，甚至那些看
上去没有意义的情况,例如弹出值到栈指针。必须用系统的模拟测试程序彻底地测试设计。
在开发PIPE的控制逻辑中，我们的设计有个细微的错误，只有通过对控制组合的仔细而系统的分析才能发现。
网络旁注ARCH:HCL: Y86处理器的HCL描述

Y86模拟器

本章的实验资料包括SEQ和PIPE处理器的模拟器。每个模拟器都有两个版本：
•GUI (图形用户界面）版本在图形窗口中显示存储器、程序代码以及处理器状态。它提
供 了一种方式简便地查看指令如何通过处理舞。控制面板还允许你交互式地重启动、单
步或 运行模拟器。

•文本版本运行的是相同的模拟器，但是它显示信息的唯一方式是打印到终端。对调试来
讲，这个版本不是很有用，但是它允许处理器的自动测试。

这些模拟器的控制逻辑是通过将逻辑块的HCL声明翻译成C代码产生的。然后，编译
这些 代码并与模拟代码的其他部分进行链接。这样的结合使得你可以用这些模拟器测试
原始设计的各 种变种。提供的测试脚本，全面地测试各种指令以及各种冒脸的可能性。