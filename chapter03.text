3.程序的机器级表示

在本章中，我们窥视了C语言提供的抽象层下面的东西，以了解机器级编程。通过
让编译器 产生机器级程序的汇编代码表示，我们了解了编译器和它的优化能力，以及机
器、数据类型和指 令集。在第5章，我们会看到，当编写能有效映射到机器上的程序
时，了解编译器的特性会有所 帮助。我们还更完整地了解了程序如何将数据存储在不同
的存储器区域中。在第12章会看到许多 这样的例子，我们需要知道一个程序变量是在运
行时栈中，是在某个动态分配的数据结构中，还是在某个全局存储位置中。理解程序如何
映射到机器上，会让理解这些存储之间的区别容易一些。

机器级程序和它们的汇编代码表示，与C程序的差别很大。在汇编语言程序中，各
种数据 类型之间的差别很小。

程序是以指令序列来表示的，每条指令都完成一个单独的
操作。部分程序 状态，如寄存器和运行时栈，对程序员来说是直接可见的。本书仅提供
了低级操作来支持数据处 理和程序控制。编译器必须用多条指令来产生和操作各种数据
结构，来实现像条件、循环和过程 这样的控制结构。我们讲述了C语言和如何编译它的
许多不同方面。我们看到C语言中缺乏边 界检查，使得许多程序容易出现缓冲区溢出。
虽然最近的运行时系统提供了安全保护，而且编译器帮助使得程序更安全，但是这已经
使许多系统容易受到入侵者的恶意攻击。

我们只分析了c到IA32和X86-64的映射，但是大多数内容对其他语言和机器组合
来说也是类似的。例如，编译C++与编译C就非常相似。实际上，C++的早期实现就只是
简单地执行了从C++到C的源到源的转换，并对结果运行C编译器，产生目标代码。
C++的对象用结构来 表示，类似于C的struct。C++的方法是用指向实现方法的代码的
指针来表示的。相比而言， Java的实现方式完全不同。Java的目标代码是一种特殊的
二进制表示，称为Java字节代码。这 种代码可以看成是虚拟机的机器级程序。正如它的
名字暗示的那样，这种机器并不是直接用硬 件实现的，而是用软件解释器处理字节代
码，模拟虚拟机的行为。另外，有一种称为及时编译 (just-in-time
compilation)的方法，动态地将字节代码序列翻译成机器指令。当代码要执行多次 时
（例如在循环中），这种方法执行起来更快。用字节代码作为程序的低级表示，优点是相
同的代码可以在许多不同的机器上执行，而本章谈到的机器代码只能在x86机器上运行。