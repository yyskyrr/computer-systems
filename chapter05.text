5.优化程序性能

虽然关于代码优化的大多数论述都描述了编译器是如何能生成高效代码的，但是应
用程序员有很多方法来协助编译器完成这项任务。

没有任何编译器能用一个好的算法或数据结构代替低效率的算法或数据结构，
因此程序设计的这些方面仍然应该是程序员主要关心的。
我们还看到妨碍优化的因素，例如存储器别名使用和过程调用，严重限制了
编译器执行大量优化的能力。同样, 程序员必须对消除这些妨碍优化的因素负主要的责
任。

这些应该被看作是好的编程习惯的一部分，因为它们可以消除不必要的工作。
基本级别之外调整性能需要一些对处理器微体系结构的理解，描述处理器用来实现
它的指令集体系结构的底层机制。对于乱序处理器的情况，只需要知道一些关于操作、
延迟和功能单元发 射时间的信息，就能够基本地预测程序的性能了。

我们研寒了一系列技术，包括循环展开、创建多个累积变量和重新结合，它们可以
利用现代处理器提供的指令级并行。随着对优化的深入，研究产生出的汇编代码以及试
着理解机器是如何执行 计算的变得重要起来。确认由程序中的数据相关决定的关键路
径，收获良多。我们还可以根据必须 要计算的操作数量，以及执行这些操作的功能单元
的数量和发射时间，计算一个计算的吞吐量界限。

包含条件分支或与存储器系统复杂交互的程序，比我们最开始考虑的简单循环程
序，更难以分析和优化。基本策略是使分支更容易预测，或者使它们很容易用条件数据
传送来实现。我们还必须注意存储和加载操作。将数值保存在局部变量中，使得它们可
以存放在寄存器中，这会很有帮助。

当处理大型程序时，将注意力集中在最耗时的部分变得很重要。代码剖析程序和相
关的工具 能帮助我们系统地评价和改进程序性能。我们描述了 GPROF, —个标准的
Unix剖析工具。还有 更加复杂完善的剖析程序可用，例如Intel的VTUNE程序开发系
统，和VALGRIND, Linux系统基本上都有。这些工具可以在过程级分解执行时间，估计
程序每个基本块（basic block)的性能。（基本块是内部没有控制转移的指令序列，
因此基本块总是整个被执行的。）

Amdahl定律提供了一个简单但是很有力的看法，通过只改进系统一部分获得性能
收益。收益既依赖于我们对这个部分的提高程度，也依赖于这个部分原来在整个时间中
所占的比例。